geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
#### Valores del APT ####
lista_resultados <- vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] <- AZ1  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M1.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M1.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M1.jpg", quality = 12)
#### Resultados del eval ####
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu <- data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$Eval[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado <- resu %>% arrange(Apt_final)
id_mediana <- resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana <- lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M2 = ggplot(df_mediana, aes(x = Gen, y = Eval)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Evaluaciones") +
theme_classic()
ggsave("M2.svg", M2,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
rm(list = ls())
# Cargar el codigo fuente #
source("Genetico REV4.R")
#### Parámetros de inicio ####
pobsize = 100 # Tamaño de la población inicial
NP =0.5 # Cantidad de parejas (1 pareja = 2 padres)
PC = 0.5 # Porcentaje de cruza
PM = 0.3 # Porcentaje de mutación
LIM = 10000 # Criterio de paro: Evaluaciones 10,000 o solución encontrada
# No converge #
resu = data.frame(Gen = 0,APT = 0, Eval = 0)
MS = list()
#### Valores del APT ####
lista_resultados = vector("list", 30)
# Realizar 30 ejecuciones y guardar el historial completo de cada una
for(i in 1:30){
AZ1 = reinas2(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] = AZ1  # Guardar el historial completo de cada ejecución
}
AZ1 = reinas(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
AZ1 = reinas(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
AZ1
# Realizar 30 ejecuciones y guardar el historial completo de cada una
i = 1
AZ1[[i]]
for(i in 1:30){
AZ1 = reinas(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[i]] = AZ1[[i]]  # Guardar el historial completo de cada ejecución
}
#### Valores del APT ####
lista_resultados = vector("list", 30)
#### Valores del APT ####
lista_resultados = vector("list", 30)
for(ij in 1:30){
AZ1 = reinas(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[ij]] = AZ1[[ij]]  # Guardar el historial completo de cada ejecución
}
lista_resultados
#### Valores del APT ####
lista_resultados = vector("list", 30)
for(ij in 1:30){
AZ1 = reinas(pobsize, NP, PC, PM, LIM)  # Suponiendo que reinas2 devuelve un dataframe con Gen, Apt, Eval.
lista_resultados[[ij]] = AZ1[[1]]  # Guardar el historial completo de cada ejecución
}
# Crear un dataframe resumen con los últimos valores de cada ejecución
resu = data.frame(
id = 1:30,
Apt_final = sapply(lista_resultados, function(df) df$APT[nrow(df)])
)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
resu_ordenado = resu %>% arrange(Apt_final)
# Ordenar las ejecuciones por Apt_final y seleccionar la mediana
library(dplyr)
resu_ordenado = resu %>% arrange(Apt_final)
id_mediana = resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana = lista_resultados[[id_mediana]]
df_mediana
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
library(ggplot2)
resu_ordenado = resu %>% arrange(Apt_final)
id_mediana = resu_ordenado$id[15]  # Seleccionamos la ejecución en la posición 15
# Extraer el dataframe correspondiente a la ejecución mediana
df_mediana = lista_resultados[[id_mediana]]
# Graficar la convergencia (Aptitud vs Generación)
M1 = ggplot(df_mediana, aes(x = Gen, y = APT)) +
geom_line(color = "blue", size = 1) +
geom_point(color = "red") +
labs(title = "Gráfica de Convergencia - Ejecución Mediana",
x = "Generación",
y = "Mejor Aptitud") +
theme_classic()
M1
### Exportar ###
library(rsvg)
library(jpeg)
ggsave("M2.svg", M1,
width = 5, height = 5,
dpi = 1000)
sv = rsvg("M2.svg",
height = 700,
width = 700)
### Exportar en jpeg
writeJPEG(sv, "M2.jpg", quality = 12)
