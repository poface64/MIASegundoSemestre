# Función interactiva para el genetico #
geneticos <- function() {
# Programa de algoritmos genéticos
print("--- Programa de Algoritmos Genéticos ---")
# Selección del tipo de algoritmo genético
print("Elige el tipo de algoritmo genético a usar:")
print("1: Caso real")
print("2: Caso binario")
AG <- as.numeric(readline(prompt = "¿Tu elección? "))
# Caso real #
if (AG == 1) {
source("REAL FUENTE.R")
print("Cargado: Algoritmo Genético Real")
# --- Configuración para el Caso Real ---
print("\n--- Configuración del Algoritmo Genético Real ---")
print("¿Qué problema quieres resolver?")
print("1: Esfera")
print("2: Cosenos")
problema <- as.numeric(readline(prompt = "¿Tu elección de problema? "))
# Población
pobsize <- as.numeric(readline(prompt = "¿Tamaño de la población? (Ej: 30) "))
# Generaciones
ngen <- as.numeric(readline(prompt = "¿Cuántas generaciones? (Ej: 1200) "))
# Porcentaje de cruza
PC <- as.numeric(readline(prompt = "¿Porcentaje de cruza? (Ej: 0.8) "))
# Porcentaje de mutación
PM <- as.numeric(readline(prompt = "¿Porcentaje de mutación? (Ej: 0.1) "))
# Parámetro b para el laplaciano
b <- as.numeric(readline(prompt = "¿Valor de 'b'? (Tip: 0.001) "))
# Tolerancia permitida
tol <- as.numeric(readline(prompt = "¿Tolerancia permitida? (Tip: 3 decimales) "))
# Mostrar historial
print("¿Mostrar por generación?")
print("1: Sí")
print("0: No")
mostrar <- as.numeric(readline(prompt = "¿Tu elección? "))
# --- Ejecución del Algoritmo Genético Real ---
print("\n--- Ejecutando el Algoritmo Genético Real ---")
A = optimizar(problema, pobsize, ngen, PC, PM, b, tol, Dn = 10, mostrar)
} else if (AG == 2) {
source("BINARIO FUENTE.R")
print("Cargado: Algoritmo Genético Binario")
# --- Configuración para el Caso Binario ---
print("\n--- Configuración del Algoritmo Genético Binario ---")
# Para el binari
print("1: Esfera")
print("2: Cosenos")
problema <- as.numeric(readline(prompt = "¿Tu elección de problema? "))
# Población
pobsize <- as.numeric(readline(prompt = "¿Tamaño de la población? (Ej: 30) "))
# Generaciones
ngen <- as.numeric(readline(prompt = "¿Cuántas generaciones? (Ej: 1200) "))
# Porcentaje de cruza
PC <- as.numeric(readline(prompt = "¿Porcentaje de cruza? (Ej: 0.8) "))
# Porcentaje de mutación
PM <- as.numeric(readline(prompt = "¿Porcentaje de mutación? (Ej: 0.1) "))
# Mostrar historial
print("¿Mostrar por generación?")
print("1: Sí")
print("0: No")
mostrar <- as.numeric(readline(prompt = "¿Tu elección? "))
# --- Ejecución del Algoritmo Genético Binario ---
print("\n--- Ejecutando el Algoritmo Genético Binario ---")
# Para el binario, 'b', 'tol' y 'Dn' no se piden, por lo que no se pasan.
# Asegúrate de que la función optimizar en BINARIO FUENTE.R pueda manejar esto.
# Si necesita esos argumentos pero no los usa, podrías pasarles un NA o 0.
# Aquí asumo que la función optimizar para el binario solo necesita los 6 argumentos que pides.
A = optimizar(problema, pobsize, ngen, PC, PM, mostrar) # Removidos b, tol, Dn
# O, si la función 'optimizar' en 'BINARIO FUENTE.R' aún espera los 8 argumentos,
# aunque no los use, puedes pasarles valores por defecto o NA:
# optimizar(problema, pobsize, ngen, PC, PM, b = NA, tol = NA, Dn = NA, mostrar)
} else {
stop("Opción inválida. Por favor, reinicia el programa y elige 1 o 2.")
}
print("\n--- ¡Programa finalizado! ---")
}
geneticos()
geneticos()
geneticos()
geneticos()
