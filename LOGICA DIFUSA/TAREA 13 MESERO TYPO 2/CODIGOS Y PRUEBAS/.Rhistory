elif comida <= 85:
comida_cat = "Buena/Transición"
else:
comida_cat = "Excelente"
print(f"   • Servicio categoría: {servicio_cat}")
print(f"   • Comida categoría: {comida_cat}")
# Predecir reglas que podrían activarse
print(f"   • Reglas potencialmente activas:")
if servicio >= 6 and comida >= 80:
print(f"     - Regla 5: Servicio Bueno + Comida Excelente → Propina Alta")
if servicio >= 6 and 25 <= comida <= 65:
print(f"     - Regla 2: Servicio Bueno + Comida Normal → Propina Normal")
if 3 <= servicio <= 7 and 60 <= comida <= 85:
print(f"     - Regla 4: Servicio Regular + Comida Buena → Propina Normal")
# ===== CONSULTA ESPECÍFICA =====
print(f"\n{'='*60}")
print("CONSULTA ESPECÍFICA DEL USUARIO")
print(f"{'='*60}")
servicio_consulta = 7
comida_consulta = 80
resultado = calcular_propina(servicio_consulta, comida_consulta)
print("=== SISTEMA DE CÁLCULO DE PROPINAS ===")
print()
servicio_entrada = 7
comida_entrada = 80
print(f"Servicio: {servicio_entrada}/10")
print(f"Comida: {comida_entrada}/100")
inputs = {"Servicio": servicio_entrada, "Comida": comida_entrada}
output = sistema.evaluate(inputs)
sistema.inputs
sistema.outputs
# Carghar el sistema difuso #
import pyit2fls as fz
import numpy as np
#### VARIABLES DE ENTRADA ####
#### Servicio ####
### Definir el rango de servicio ###
servicio_dom = np.linspace(0, 10, 100)
# Servicio: Malo (mu=1.5, sigma=[2.5,1.7])
servicio_maloMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [1.5, 2.5, 1],
fz.gaussian_mf, [1.5, 1.7, 0.5],
check_set=True)
# Servicio: Regular (mu=5, sigma=[2,1.5])
servicio_regularMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [5, 2, 1],
fz.gaussian_mf, [5, 1.5, 0.5],
check_set=True)
# Servicio: Bueno (mu=7.5, sigma=[2,1.5])
servicio_buenoMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [7.5, 2, 1],
fz.gaussian_mf, [7.5, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(servicio_maloMF,
servicio_regularMF,
servicio_buenoMF)
#### Comida ####
### Definir el rango de comida ###
comida_dom = np.linspace(0, 100, 1000)
# Comida: Malo (mu=15, sigma=[20,15])
comida_maloMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [15, 20, 1],
fz.gaussian_mf, [15, 15, 0.5],
check_set=True)
# Comida: Normal (mu=45.5, sigma=[20,15])
comida_normalMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [45.5, 20, 1],
fz.gaussian_mf, [45.5, 15, 0.5],
check_set=True)
# Comida: Buena (mu=66, sigma=[15,10])
comida_buenaMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [66, 15, 1],
fz.gaussian_mf, [66, 10, 0.5],
check_set=True)
# Comida: Excelente (mu=90, sigma=[20,15])
comida_excelenteMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [90, 20, 1],
fz.gaussian_mf, [90, 15, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(comida_maloMF,
comida_normalMF,
comida_buenaMF,
comida_excelenteMF)
#### VARIABLES DE SALIDA ####
#### PROPINA ####
### Definir el rango de comida ###
propina_dom = np.linspace(0, 20, 200)
# Propina: Baja (mu=5, sigma=[2.5,2])
propina_bajaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [5, 2.5, 1],
fz.gaussian_mf, [5, 2, 0.5],
check_set=True)
# Propina: Normal (mu=10, sigma=[2.5,2])
propina_normalMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [10, 2.5, 1],
fz.gaussian_mf, [10, 2, 0.5],
check_set=True)
# Propina: Alta (mu=16, sigma=[2,1.5])
propina_altaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [16, 2, 1],
fz.gaussian_mf, [16, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(propina_bajaMF,
propina_normalMF,
propina_altaMF,
legends=["Baja", "Normal", "Alta"])
############# EXPLORANDO PARA HACER EL SISTEMA DE REGLAS #######
sistema = fz.IT2FLS()
# Variables de entrada al sistema #
sistema.add_input_variable("Servicio")
sistema.add_input_variable("Comida")
# Variables de salida #
sistema.add_output_variable("Propipna")
### Definir la base de reglas ###
# Regla 1
sistema.add_rule([("Servicio", servicio_maloMF),("Comida", comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 2
sistema.add_rule([("Servicio", servicio_buenoMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 3
sistema.add_rule([("Servicio", servicio_regularMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 4
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_buenaMF)],
[("Propina", propina_normalMF)])
# Regla 5
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
# Regla 6
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_excelenteMF)],
[("Propina", propina_bajaMF)])
# Regla 7
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 8
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_normalMF)],
[("Propina", propina_bajaMF)])
# Regla 9
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_buenaMF)],
[("Propina", propina_bajaMF)])
# Regla 10
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_buenaMF)],
[("Propina", propina_altaMF)])
# Regla 11
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 12
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
print("=== SISTEMA DE CÁLCULO DE PROPINAS ===")
print()
sistema.inputs
sistema.evaluate({"Servicio":7, "Comida":90})
inputs = {"Servicio":7, "Comida":90}
inputs
from pyIT2FLS import min_t_norm, max_s_norm
from pyit2fls import min_t_norm, max_s_norm
inputs = {"Servicio":7, "Comida":90}
sistema.evaluate()
sistema.evaluate(inputs)
min_t_norm
from pyit2fls import min_t_norm, max_s_norm
sistema.evaluate(inputs,min_t_norm,max_s_norm)
sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
# Carghar el sistema difuso #
import pyit2fls as fz
import numpy as np
#### VARIABLES DE ENTRADA ####
#### Servicio ####
### Definir el rango de servicio ###
servicio_dom = np.linspace(0, 10, 100)
# Servicio: Malo (mu=1.5, sigma=[2.5,1.7])
servicio_maloMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [1.5, 2.5, 1],
fz.gaussian_mf, [1.5, 1.7, 0.5],
check_set=True)
# Servicio: Regular (mu=5, sigma=[2,1.5])
servicio_regularMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [5, 2, 1],
fz.gaussian_mf, [5, 1.5, 0.5],
check_set=True)
# Servicio: Bueno (mu=7.5, sigma=[2,1.5])
servicio_buenoMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [7.5, 2, 1],
fz.gaussian_mf, [7.5, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(servicio_maloMF,
servicio_regularMF,
servicio_buenoMF)
#### Comida ####
### Definir el rango de comida ###
comida_dom = np.linspace(0, 100, 1000)
# Comida: Malo (mu=15, sigma=[20,15])
comida_maloMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [15, 20, 1],
fz.gaussian_mf, [15, 15, 0.5],
check_set=True)
# Comida: Normal (mu=45.5, sigma=[20,15])
comida_normalMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [45.5, 20, 1],
fz.gaussian_mf, [45.5, 15, 0.5],
check_set=True)
# Comida: Buena (mu=66, sigma=[15,10])
comida_buenaMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [66, 15, 1],
fz.gaussian_mf, [66, 10, 0.5],
check_set=True)
# Comida: Excelente (mu=90, sigma=[20,15])
comida_excelenteMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [90, 20, 1],
fz.gaussian_mf, [90, 15, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(comida_maloMF,
comida_normalMF,
comida_buenaMF,
comida_excelenteMF)
#### VARIABLES DE SALIDA ####
#### PROPINA ####
### Definir el rango de comida ###
propina_dom = np.linspace(0, 20, 200)
# Propina: Baja (mu=5, sigma=[2.5,2])
propina_bajaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [5, 2.5, 1],
fz.gaussian_mf, [5, 2, 0.5],
check_set=True)
# Propina: Normal (mu=10, sigma=[2.5,2])
propina_normalMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [10, 2.5, 1],
fz.gaussian_mf, [10, 2, 0.5],
check_set=True)
# Propina: Alta (mu=16, sigma=[2,1.5])
propina_altaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [16, 2, 1],
fz.gaussian_mf, [16, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(propina_bajaMF,
propina_normalMF,
propina_altaMF,
legends=["Baja", "Normal", "Alta"])
############# EXPLORANDO PARA HACER EL SISTEMA DE REGLAS #######
sistema = fz.IT2FLS()
# Variables de entrada al sistema #
sistema.add_input_variable("Servicio")
sistema.add_input_variable("Comida")
# Variables de salida #
sistema.add_output_variable("Propina")
### Definir la base de reglas ###
# Regla 1
sistema.add_rule([("Servicio", servicio_maloMF),("Comida", comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 2
sistema.add_rule([("Servicio", servicio_buenoMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 3
sistema.add_rule([("Servicio", servicio_regularMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 4
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_buenaMF)],
[("Propina", propina_normalMF)])
# Regla 5
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
# Regla 6
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_excelenteMF)],
[("Propina", propina_bajaMF)])
# Regla 7
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 8
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_normalMF)],
[("Propina", propina_bajaMF)])
# Regla 9
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_buenaMF)],
[("Propina", propina_bajaMF)])
# Regla 10
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_buenaMF)],
[("Propina", propina_altaMF)])
# Regla 11
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 12
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
##########################
# ===== CONSULTA DIRECTA =====
print("=== SISTEMA DE CÁLCULO DE PROPINAS ===")
print()
#### Hacer la evaluación
from pyit2fls import min_t_norm, max_s_norm
inputs = {"Servicio":7, "Comida":90}
sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
salida,tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
salida
crisp
fz.crisp()
fz.crisp(tr)
salida,tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
fz.crisp(salida)
salida
M = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
salida,tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
salida.values()
# Carghar el sistema difuso #
import pyit2fls as fz
import numpy as np
#### VARIABLES DE ENTRADA ####
#### Servicio ####
### Definir el rango de servicio ###
servicio_dom = np.linspace(0, 10, 100)
# Servicio: Malo (mu=1.5, sigma=[2.5,1.7])
servicio_maloMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [1.5, 2.5, 1],
fz.gaussian_mf, [1.5, 1.7, 0.5],
check_set=True)
# Servicio: Regular (mu=5, sigma=[2,1.5])
servicio_regularMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [5, 2, 1],
fz.gaussian_mf, [5, 1.5, 0.5],
check_set=True)
# Servicio: Bueno (mu=7.5, sigma=[2,1.5])
servicio_buenoMF = fz.IT2FS(servicio_dom ,
fz.gaussian_mf, [7.5, 2, 1],
fz.gaussian_mf, [7.5, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(servicio_maloMF,
servicio_regularMF,
servicio_buenoMF)
#### Comida ####
### Definir el rango de comida ###
comida_dom = np.linspace(0, 100, 1000)
# Comida: Malo (mu=15, sigma=[20,15])
comida_maloMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [15, 20, 1],
fz.gaussian_mf, [15, 15, 0.5],
check_set=True)
# Comida: Normal (mu=45.5, sigma=[20,15])
comida_normalMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [45.5, 20, 1],
fz.gaussian_mf, [45.5, 15, 0.5],
check_set=True)
# Comida: Buena (mu=66, sigma=[15,10])
comida_buenaMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [66, 15, 1],
fz.gaussian_mf, [66, 10, 0.5],
check_set=True)
# Comida: Excelente (mu=90, sigma=[20,15])
comida_excelenteMF = fz.IT2FS(comida_dom ,
fz.gaussian_mf, [90, 20, 1],
fz.gaussian_mf, [90, 15, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(comida_maloMF,
comida_normalMF,
comida_buenaMF,
comida_excelenteMF)
#### VARIABLES DE SALIDA ####
#### PROPINA ####
### Definir el rango de comida ###
propina_dom = np.linspace(0, 20, 200)
# Propina: Baja (mu=5, sigma=[2.5,2])
propina_bajaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [5, 2.5, 1],
fz.gaussian_mf, [5, 2, 0.5],
check_set=True)
# Propina: Normal (mu=10, sigma=[2.5,2])
propina_normalMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [10, 2.5, 1],
fz.gaussian_mf, [10, 2, 0.5],
check_set=True)
# Propina: Alta (mu=16, sigma=[2,1.5])
propina_altaMF = fz.IT2FS(propina_dom,
fz.gaussian_mf, [16, 2, 1],
fz.gaussian_mf, [16, 1.5, 0.5],
check_set=True)
### Mostrar gráfica de Servicio
fz.IT2FS_plot(propina_bajaMF,
propina_normalMF,
propina_altaMF,
legends=["Baja", "Normal", "Alta"])
############# EXPLORANDO PARA HACER EL SISTEMA DE REGLAS #######
sistema = fz.IT2FLS()
# Variables de entrada al sistema #
sistema.add_input_variable("Servicio")
sistema.add_input_variable("Comida")
# Variables de salida #
sistema.add_output_variable("Propina")
### Definir la base de reglas ###
# Regla 1
sistema.add_rule([("Servicio", servicio_maloMF),("Comida", comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 2
sistema.add_rule([("Servicio", servicio_buenoMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 3
sistema.add_rule([("Servicio", servicio_regularMF),("Comida", comida_normalMF)],
[("Propina", propina_normalMF)])
# Regla 4
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_buenaMF)],
[("Propina", propina_normalMF)])
# Regla 5
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
# Regla 6
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_excelenteMF)],
[("Propina", propina_bajaMF)])
# Regla 7
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 8
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_normalMF)],
[("Propina", propina_bajaMF)])
# Regla 9
sistema.add_rule([("Servicio",servicio_maloMF),("Comida",comida_buenaMF)],
[("Propina", propina_bajaMF)])
# Regla 10
sistema.add_rule([("Servicio",servicio_buenoMF),("Comida",comida_buenaMF)],
[("Propina", propina_altaMF)])
# Regla 11
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_maloMF)],
[("Propina", propina_bajaMF)])
# Regla 12
sistema.add_rule([("Servicio",servicio_regularMF),("Comida",comida_excelenteMF)],
[("Propina", propina_altaMF)])
inputs = {"Servicio":7, "Comida":90}
salida,tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
fz.crisp(salida)
tr
fz.crisp(tr["Propina"])
inputs = {"Servicio":9, "Comida":90}
salida,tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
fz.crisp(tr["Propina"])
fz.crisp(tr["Propina"])
import numpy as np
import matplotlib.pyplot as plt
from matplotlib import cm
from matplotlib.ticker import LinearLocator, FormatStrFormatter
# Generar la malla de evaluación
X1, X2 = np.meshgrid(servicio_dom, comida_dom)
Z1 = np.zeros_like(X1)
servicio_dom
comida_dom
X1, X2 = np.meshgrid(servicio_dom, comida_dom)
Z1 = np.zeros_like(X1)
# Evaluar el sistema en toda la malla
for i, x1 in enumerate(servicio_dom):
for j, x2 in enumerate(comida_dom):
# Evaluar el sistema con entradas actuales
it2out, tr = myIT2FLS.evaluate({"Servicio": x1, "Comida": x2})
# Obtener el valor crisp de la salida
Z1[j, i] = tr["Propina"]  # Nota: j, i por el orden del meshgrid
# Evaluar el sistema en toda la malla
for i, x1 in enumerate(servicio_dom):
for j, x2 in enumerate(comida_dom):
# Evaluar el sistema con entradas actuales
it2out, tr = sistema.evaluate({"Servicio": x1, "Comida": x2})
# Obtener el valor crisp de la salida
Z1[j, i] = tr["Propina"]  # Nota: j, i por el orden del meshgrid
# Generar la malla de evaluación
X1, X2 = np.meshgrid(servicio_dom, comida_dom)
Z1 = np.zeros_like(X1)
# Evaluar el sistema en toda la malla
for i, x1 in enumerate(servicio_dom):
for j, x2 in enumerate(comida_dom):
# Evaluar el sistema con entradas actuales
# Entradas del sistema
inputs = {"Servicio":x1, "Comida":x2}
# Aplicación del sistema
it2out, tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
# Obtener el valor crisp de la salida
Z1[j, i] = tr["Propina"]  # Nota: j, i por el orden del meshgrid
fz.crisp(tr["Propina"])
# Generar la malla de evaluación
X1, X2 = np.meshgrid(servicio_dom, comida_dom)
Z1 = np.zeros_like(X1)
# Evaluar el sistema en toda la malla
for i, x1 in enumerate(servicio_dom):
for j, x2 in enumerate(comida_dom):
# Evaluar el sistema con entradas actuales
# Entradas del sistema
inputs = {"Servicio":x1, "Comida":x2}
# Aplicación del sistema
it2out, tr = sistema.evaluate(inputs,min_t_norm,max_s_norm,propina_dom)
# Obtener el valor crisp de la salida
Z1[j, i] = fz.crisp(tr["Propina"])  # Nota: j, i por el orden del meshgrid
Z1.size
# Crear la figura 3D
fig = plt.figure(figsize=(10, 7))
ax = fig.add_subplot(111, projection="3d")
# Graficar la superficie
surf = ax.plot_surface(X1, X2, Z1, cmap=cm.viridis,
linewidth=0, antialiased=True)
# Etiquetas de los ejes
ax.set_xlabel("Servicio")
ax.set_ylabel("Comida")
ax.set_zlabel("Propina sugerida")
# Ajustar formato del eje Z
ax.zaxis.set_major_locator(LinearLocator(10))
ax.zaxis.set_major_formatter(FormatStrFormatter('%.02f'))
# Barra de color
fig.colorbar(surf, shrink=0.5, aspect=8)
plt.title("Superficie de decisión difusa tipo 2")
plt.tight_layout()
plt.show()
plt.show()
