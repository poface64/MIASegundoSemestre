library(flextable)
library(flextable)
# Cargar tus datos
ruta = "DATA (2).xlsx"
rm(list=ls())
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
rm(list=ls())
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
datos = as.data.frame(read_excel(ruta))
# Cargar tus datos
ruta = "DATA (2).xlsx"
datos = as.data.frame(read_excel(ruta))
head(datos)
knitr::opts_chunk$set(echo = F,
warning = F,
message = F)
# Cargar las librerias necesarias #
library(flextable)
knitr::opts_chunk$set(echo = F,
warning = F,
message = F)
library(readxl)
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
# Cargar tus datos
ruta = "DATA (2).xlsx"
datos = as.data.frame(read_excel(ruta))
# Especial
autofit(theme_box(flextable(head(datos))))
dim(datos)
datos1 = datos[,-1]
### Obtener descriptivos
datos1 = datos[,-1]
### Obtener descriptivos
datos1 = datos[,-1]
apply(datos1,2,min)
cbind.data.frame(apply(datos1,2,min),
apply(datos1,2,max))
cbind.data.frame(min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median))
cbind.data.frame(variables = names(datos1),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median))
sub("_"," ",names(datos1))
sub("_"," ",sub("_"," ",names(datos1)))
cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median))
sub("_"," ",names(datos1))
cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median))
apply(datos1,2,sd)
resu = cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median),
desviación = apply(datos1,2,sd))
resu[,-1]
resu[,-1] = round(resu[,-1],4)
resu
### Obtener descriptivos
datos1 = datos[,-1]
resu = cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median),
desviación = apply(datos1,2,sd))
resu[,-1] = round(resu[,-1],4)
# Mostrar
autofit(theme_box(flextable(resu)))
dim(resu)
dim(resu)
dim(resu)
plot(datos1)
library(ggplot2)
library(ggplot2)
library(dplyr)
library(tidyr)
# 1. Preparar los datos para el gráfico
data_long <- datos1 %>%
pivot_longer(cols = everything(), names_to = "variable1", values_to = "value1") %>%
mutate(id = 1:n()) %>%
crossing(
datos1 %>%
pivot_longer(cols = everything(), names_to = "variable2", values_to = "value2") %>%
mutate(id = 1:n())
) %>%
filter(id.x <= id.y) # Filtrar para la triangular inferior y la diagonal
# 2. Crear el gráfico con ggplot2
grafico_dispersion <- ggplot(data_long, aes(x = value1, y = value2)) +
geom_point() +
facet_grid(variable2 ~ variable1, switch = "both") + # Crear la matriz de gráficos
theme_bw() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
# Añadir los nombres de las variables en la diagonal
geom_text(data = distinct(data_long, variable1, variable2),
aes(x = mean(range(datos1[[variable1]])),
y = mean(range(datos1[[variable2]])),
label = ifelse(variable1 == variable2, variable1, "")),
size = 3) +
labs(title = "Gráfico de Dispersión (Triangular Inferior)",
x = "",
y = "")
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(dplyr)
library(tidyr)
# Cargar tus datos
ruta = "DATA (2).xlsx"
### Obtener descriptivos
datos1 = datos[,-1]
resu = cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median),
desviación = apply(datos1,2,sd))
resu[,-1] = round(resu[,-1],4)
# 1. Preparar los datos para el gráfico
data_long <- datos1 %>%
pivot_longer(cols = everything(), names_to = "variable1", values_to = "value1") %>%
mutate(id = 1:n()) %>%
crossing(
datos1 %>%
pivot_longer(cols = everything(), names_to = "variable2", values_to = "value2") %>%
mutate(id = 1:n())
) %>%
filter(id.x <= id.y) # Filtrar para la triangular inferior y la diagonal
names(datos1)
# 1. Preparar los datos para el gráfico
data_long <- datos1 %>%
pivot_longer(cols = everything(), names_to = "PIB", values_to = "RIESGO_PAIS") %>%
mutate(id = 1:n()) %>%
crossing(
datos1 %>%
pivot_longer(cols = everything(), names_to = "PIB", values_to = "RIESGO_PAIS") %>%
mutate(id = 1:n())
) %>%
filter(id.x <= id.y) # Filtrar para la triangular inferior y la diagonal
names(datos)
# 1. Preparar los datos para el gráfico
data_long <- datos1 %>%
pivot_longer(cols = -PERIODO, names_to = "variable1", values_to = "value1") %>%
mutate(id = 1:n()) %>%
crossing(
datos1 %>%
pivot_longer(cols = -PERIODO, names_to = "variable2", values_to = "value2") %>%
mutate(id = 1:n())
) %>%
filter(id.x <= id.y)
names(datos1)
# 1. Preparar los datos para el gráfico
data_long <- datos1 %>%
pivot_longer(cols = -PIB, names_to = "variable1", values_to = "value1") %>%
mutate(id = 1:n()) %>%
crossing(
datos1 %>%
pivot_longer(cols = -PIB, names_to = "variable2", values_to = "value2") %>%
mutate(id = 1:n())
) %>%
filter(id.x <= id.y)
# 2. Crear el gráfico con ggplot2
grafico_dispersion <- ggplot(data_long, aes(x = value1, y = value2)) +
geom_point() +
facet_grid(variable2 ~ variable1, switch = "both") +
theme_bw() +
theme(
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
strip.background = element_blank(),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank()
) +
# Añadir los nombres de las variables en la diagonal
geom_text(data = distinct(data_long, variable1, variable2),
aes(x = mean(range(datos1[[variable1]])),
y = mean(range(datos1[[variable2]])),
label = ifelse(variable1 == variable2, variable1, "")),
size = 3) +
labs(title = "Gráfico de Dispersión (Triangular Inferior)",
x = "",
y = "")
pairs(mtcars[, c(1, 3:6)], main = "Scatter Plot Matrix for mtcars Dataset")
###
library(ggplot2)
library(GGally)
install.packages("GGaly")
install.packages("GGally")
gr1 = ggpairs(datos1,
title = "Gráficos de dispersión",
axisLabels = "show")
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(GGally)
gr1 = ggpairs(datos1,
title = "Gráficos de dispersión",
axisLabels = "show")
gr1
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(GGally)
ggsave(gr1,"g1.png",
width = 6,
height = 6,
dpi = 300)
####
ggsave("g1.png",gr1,
width = 6,
height = 6,
dpi = 300)
# Modelo completo
modelo = lm(PIB~.,datos1)
# Modelo completo
modelo = lm(PIB~.,datos1)
# SUMMARY #
autofit(as_flextable(modelo))
# Modelo completo
modelo = lm(PIB~.,datos1)
# SUMMARY #
theme_box(as_flextable(modelo))
# SUMMARY #
theme_box(as_flextable(modelo))
rm(list=ls())
#### Selección del modelo ####
library(MASS)  # Para poder usar la funcion stepAIC
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(GGally)
library(MASS)
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=TRUE, direction="backward")
# Modelo completo
modelo = lm(PIB~.,datos1)
rm(list=ls())
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(GGally)
library(MASS)
# Cargar tus datos
ruta = "DATA (2).xlsx"
datos = as.data.frame(read_excel(ruta))
### Obtener descriptivos
datos1 = datos[,-1]
# Modelo completo
modelo = lm(PIB~.,datos1)
# SUMMARY #
theme_box(as_flextable(modelo))
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=TRUE, direction="backward")
modelored
theme_box(as_flextable(modelored))
# Modelo completo
modelo = lm(PIB~.,datos1)
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=TRUE, direction="backward")
theme_box(as_flextable(modelored))
library(MASS)
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=TRUE, direction="backward")
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=TRUE, direction="backward")
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=F, direction="backward")
theme_box(as_flextable(modelored))
theme_box(as_flextable(modelo))
## Prueba de normalidad ##
prueba = shapiro.test(modelored)
## Prueba de normalidad ##
prueba = shapiro.test(modelored$residuals)
as_flextable(prueba)
prueba
library(lmtest)
## Prueba de normalidad ##
prueba1 = shapiro.test(modelored$residuals)
prueba1
## Prueba de Breush Pagan ##
prueba2 =  bptest(modelored)
prueba2
## Prueba de independiente ##
dwtest(modelored)
## Prueba de independiente ##
as_flextable(dwtest(modelored))
rm(list=ls())
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(GGally)
library(MASS)
library(lmtest)
## Prueba de Breush Pagan ##
prueba2 =  bptest(modelored)
knitr::opts_chunk$set(echo = F,
warning = F,
message = F)
# Cargar las librerias necesarias #
library(flextable)
library(readxl)
library(ggplot2)
library(GGally)
library(MASS)
library(lmtest)
# Cargar tus datos
ruta = "DATA (2).xlsx"
datos = as.data.frame(read_excel(ruta))
# Especial
autofit(theme_box(flextable(head(datos[,1:5]))))
autofit(theme_box(flextable(head(datos[,6:9]))))
### Obtener descriptivos
datos1 = datos[,-1]
resu = cbind.data.frame(variables = sub("_"," ",sub("_"," ",names(datos1))),
min = apply(datos1,2,min),
max = apply(datos1,2,max),
media = apply(datos1,2,mean),
mediana = apply(datos1,2,median),
desviación = apply(datos1,2,sd))
resu[,-1] = round(resu[,-1],4)
# Mostrar
autofit(theme_box(flextable(resu[,c(1,2:5)])))
autofit(theme_box(flextable(resu[,c(1,6)])))
#### Hacer el gráfico de dispersión ####
gr1 = ggpairs(datos1,
title = "Gráficos de dispersión",
axisLabels = "show")
ggsave("g1.png",gr1,
width = 6,
height = 6,
dpi = 300)
# Modelo completo
modelo = lm(PIB~.,datos1)
# SUMMARY #
theme_box(as_flextable(modelo))
#### Selección del modelo ####
modelored = stepAIC(modelo, trace=F, direction="backward")
theme_box(as_flextable(modelored))
## Prueba de normalidad ##
prueba1 = shapiro.test(modelored$residuals)
theme_box(as_flextable(prueba1))
## Prueba de Breush Pagan ##
prueba2 =  bptest(modelored)
theme_box(as_flextable(prueba2))
## Prueba de independiente ##
theme_box(as_flextable(dwtest(modelored)))
install.packages("regclass")
library(car)
install.packages("car")
## Revisar la multicolinealidad ##
vif(modelored)
library(car)
## Revisar la multicolinealidad ##
vif(modelored)
# Cargar las librerias necesarias #
library(flextable)
library(ggplot2)
library(GGally)
library(lmtest)
library(car)
## Revisar la multicolinealidad ##
vif(modelored)
## Revisar la multicolinealidad ##
as.data.frame(vif(modelored))
## Revisar la multicolinealidad ##
data.frame(VIFF = vif(modelored))
## Revisar la multicolinealidad ##
A = data.frame(VIFF = vif(modelored))
