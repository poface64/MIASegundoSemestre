# Cargar las librerias necesarias #
import os
import random
def selector(ruta_carpeta):
"""
Selecciona una muestra aleatoria de imágenes JPEG de una carpeta dada.
Args:
ruta_carpeta (str): La ruta de la carpeta que contiene las imágenes.
Returns:
list: Una lista de las rutas completas de las imágenes seleccionadas aleatoriamente,
o None si no se encuentran imágenes JPEG o la carpeta no existe.
"""
if not os.path.exists(ruta_carpeta):
print(f"Error: La carpeta '{ruta_carpeta}' no existe.")
return None
imagenes_jpeg = []
for nombre_archivo in os.listdir(ruta_carpeta):
if nombre_archivo.lower().endswith(".jpeg") or nombre_archivo.lower().endswith(".jpg"):
imagenes_jpeg.append(os.path.join(ruta_carpeta, nombre_archivo))
if not imagenes_jpeg:
print(f"No se encontraron imágenes JPEG en la carpeta '{ruta_carpeta}'.")
return None
print(f"Se encontraron {len(imagenes_jpeg)} imágenes JPEG en la carpeta.")
while True:
try:
num_muestras = int(input(f"¿Cuántas imágenes aleatorias quieres seleccionar (1 - {len(imagenes_jpeg)})? "))
if 1 <= num_muestras <= len(imagenes_jpeg):
break
else:
print(f"Por favor, ingresa un número entre 1 y {len(imagenes_jpeg)}.")
except ValueError:
print("Entrada inválida. Por favor, ingresa un número entero.")
muestras_seleccionadas = random.sample(imagenes_jpeg, num_muestras)
return muestras_seleccionadas
if __name__ == "__main__":
# Pide al usuario la ruta de la carpeta
ruta_de_mi_carpeta = input("Por favor, ingresa la ruta de la carpeta con tus imágenes: ")
imagenes_aleatorias = seleccionar_imagenes_aleatorias(ruta_de_mi_carpeta)
if imagenes_aleatorias:
print("\n--- Imágenes JPEG seleccionadas aleatoriamente ---")
for img in imagenes_aleatorias:
print(img)
else:
print("\nNo se pudo seleccionar ninguna imagen.")
ruta = "C:\\Users\\Angel\\Desktop\\Cartel FORO 2025\\CARAS 1\\Humans"
def selector(ruta_carpeta):
"""
Selecciona una muestra aleatoria de imágenes JPEG de una carpeta dada.
Args:
ruta_carpeta (str): La ruta de la carpeta que contiene las imágenes.
Returns:
list: Una lista de las rutas completas de las imágenes seleccionadas aleatoriamente,
o None si no se encuentran imágenes JPEG o la carpeta no existe.
"""
if not os.path.exists(ruta_carpeta):
print(f"Error: La carpeta '{ruta_carpeta}' no existe.")
return None
imagenes_jpeg = []
for nombre_archivo in os.listdir(ruta_carpeta):
if nombre_archivo.lower().endswith(".jpeg") or nombre_archivo.lower().endswith(".jpg"):
imagenes_jpeg.append(os.path.join(ruta_carpeta, nombre_archivo))
if not imagenes_jpeg:
print(f"No se encontraron imágenes JPEG en la carpeta '{ruta_carpeta}'.")
return None
print(f"Se encontraron {len(imagenes_jpeg)} imágenes JPEG en la carpeta.")
while True:
try:
num_muestras = int(input(f"¿Cuántas imágenes aleatorias quieres seleccionar (1 - {len(imagenes_jpeg)})? "))
if 1 <= num_muestras <= len(imagenes_jpeg):
break
else:
print(f"Por favor, ingresa un número entre 1 y {len(imagenes_jpeg)}.")
except ValueError:
print("Entrada inválida. Por favor, ingresa un número entero.")
muestras_seleccionadas = random.sample(imagenes_jpeg, num_muestras)
return muestras_seleccionadas
if __name__ == "__main__":
# Pide al usuario la ruta de la carpeta
ruta_de_mi_carpeta = input("Por favor, ingresa la ruta de la carpeta con tus imágenes: ")
imagenes_aleatorias = seleccionar_imagenes_aleatorias(ruta_de_mi_carpeta)
if imagenes_aleatorias:
print("\n--- Imágenes JPEG seleccionadas aleatoriamente ---")
for img in imagenes_aleatorias:
print(img)
else:
print("\nNo se pudo seleccionar ninguna imagen.")
ruta
muestras = selector(ruta)
100
muestras
import numpy as np
import os
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.imagenet_utils import preprocess_input
import tensorflow as tf
import os
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
from tensorflow.keras.applications.imagenet_utils import preprocess_input
import tensorflow as tf
import os
import random
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
from tensorflow.keras.preprocessing import image
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np
import pandas as pd
import cv2
import cv2
from PIL import Image
import cv2
from PIL import Image
import torch
from facenet_pytorch import MTCNN, InceptionResnetV1
from facenet_pytorch import MTCNN, InceptionResnetV1
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
