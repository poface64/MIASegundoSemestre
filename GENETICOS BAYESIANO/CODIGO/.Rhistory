### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn,bn_entrenada)
reporte
### Distancia de Hamming ###
shd(bn,bn_entrenada)
bn_entrenada$learning
bn_entrenada <- bn.fit(bn_aprendida, data, method = "mle")
###
bn_entrenada <- bn.fit(bn_aprendida, data, method = "mle")
###
bn_entrenada <- bn.fit(bn_entrenada , data, method = "mle")
bn.fit(bn_entrenada , data, method = "mle")
str(bn)
bn$T
bn$A
bn$S
bn$E
bn$E
str(bn)
str(bn_entrenada)
str(bn_entrenada)
### Distancia de Hamming ###
bn_estructura
shd(bn, bn_estructura)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
bn
bn_oro
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
bn_oro
bn_oro
bn
shd(bn_oro, bn_estructura)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
shd(bn_oro, bn_estructura)
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
dife = shd(bn_oro, bn_estructura)
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
reso
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
length(rutas)
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
for(i in 1:length(rutas)){
#### Cargar la red de oro ####
print(rutas[i])
load(rutas[i])
#### Gráficar la red y obtener sus datos ####
set.seed(8) # Obtener mil instancias
data = rbn(bn, 1000)
#### Calcular la red con mi algoritmo ###
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
### Gráfico de Convergencia ###
png(paste0(i,"gc.png") , width = 800, height = 600, res = 100)
plot(sapply(resultado$historial, function(x) x$fitness),
type = "l", ylab = "Fitness (MDL)", xlab = "Generación")
dev.off()
#### Gráfico de la red obtenida ####
png(paste0(i,"gr.png") , width = 800, height = 600, res = 100)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
dev.off()
#### Convertir la matriz a un objeto bn
mejor_adj = resultado$mejor$adj
bn_estructura <- empty.graph(nodes = colnames(mejor_adj))
amat(bn_estructura) <- mejor_adj
#### Aprender la red usando la matriz de adyacencias y bnlearn #
bn_entrenada = bn.fit(bn_estructura, data, method = "mle")
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
lentrenada = logLik(bn_entrenada, data  )
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn,bn_entrenada)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
}
### Exportar los resultados
res0 = cbind.data.frame(reso,rutas)
res0
bn_estructura
bn_oro
shd(bn_oro, bn_estructura)
KL(bn,bn_entrenada)
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
loro
lentrenada = logLik(bn_entrenada, data  )
lentrenada
compare(bn_oro, bn_aprendida, arcs = TRUE)
compare(bn_oro, bn_estructura, arcs = TRUE)
loro - lentrenada
loro - lentrenada
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn,bn_entrenada)
KL(bn_entrenada, bn)
bn_entrenada
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
for(i in 1:length(rutas)){
#### Cargar la red de oro ####
print(rutas[i])
load(rutas[i])
#### Gráficar la red y obtener sus datos ####
set.seed(8) # Obtener mil instancias
data = rbn(bn, 1000)
#### Calcular la red con mi algoritmo ###
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
### Gráfico de Convergencia ###
png(paste0(i,"gc.png") , width = 800, height = 600, res = 100)
plot(sapply(resultado$historial, function(x) x$fitness),
type = "l", ylab = "Fitness (MDL)", xlab = "Generación")
dev.off()
#### Gráfico de la red obtenida ####
png(paste0(i,"gr.png") , width = 800, height = 600, res = 100)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
dev.off()
#### Convertir la matriz a un objeto bn
mejor_adj = resultado$mejor$adj
bn_estructura <- empty.graph(nodes = colnames(mejor_adj))
amat(bn_estructura) <- mejor_adj
#### Aprender la red usando la matriz de adyacencias y bnlearn #
bn_entrenada = bn.fit(bn_estructura, data, method = "mle")
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
lentrenada = logLik(bn_entrenada, data  )
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn,bn_entrenada)
KL(bn_entrenada, bn)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
}
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
for(i in 1:length(rutas)){
#### Cargar la red de oro ####
print(rutas[i])
load(rutas[i])
#### Gráficar la red y obtener sus datos ####
set.seed(8) # Obtener mil instancias
data = rbn(bn, 1000)
#### Calcular la red con mi algoritmo ###
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
### Gráfico de Convergencia ###
png(paste0(i,"gc.png") , width = 800, height = 600, res = 100)
plot(sapply(resultado$historial, function(x) x$fitness),
type = "l", ylab = "Fitness (MDL)", xlab = "Generación")
dev.off()
#### Gráfico de la red obtenida ####
png(paste0(i,"gr.png") , width = 800, height = 600, res = 100)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
dev.off()
#### Convertir la matriz a un objeto bn
mejor_adj = resultado$mejor$adj
bn_estructura <- empty.graph(nodes = colnames(mejor_adj))
amat(bn_estructura) <- mejor_adj
#### Aprender la red usando la matriz de adyacencias y bnlearn #
bn_entrenada = bn.fit(bn_estructura, data, method = "mle")
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
lentrenada = logLik(bn_entrenada, data  )
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn_entrenada, bn)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
}
rm(list=ls())
##### Resultados de oro ####
### Cargar toda mi libreria con el genetico ####
source("BNSL.R")
library(igraph)
library(bnlearn)
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
for(i in 1:length(rutas)){
#### Cargar la red de oro ####
print(rutas[i])
load(rutas[i])
#### Gráficar la red y obtener sus datos ####
set.seed(8) # Obtener mil instancias
data = rbn(bn, 1000)
#### Calcular la red con mi algoritmo ###
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
### Gráfico de Convergencia ###
png(paste0(i,"gc.png") , width = 800, height = 600, res = 100)
plot(sapply(resultado$historial, function(x) x$fitness),
type = "l", ylab = "Fitness (MDL)", xlab = "Generación")
dev.off()
#### Gráfico de la red obtenida ####
png(paste0(i,"gr.png") , width = 800, height = 600, res = 100)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
dev.off()
#### Convertir la matriz a un objeto bn
mejor_adj = resultado$mejor$adj
bn_estructura <- empty.graph(nodes = colnames(mejor_adj))
amat(bn_estructura) <- mejor_adj
#### Aprender la red usando la matriz de adyacencias y bnlearn #
bn_entrenada = bn.fit(bn_estructura, data, method = "mle")
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
lentrenada = logLik(bn_entrenada, data  )
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn_entrenada, bn)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
print(reporte)
}
res0 = cbind.data.frame(reso,rutas)
res0
rm(list=ls())
##### Resultados de oro ####
### Cargar toda mi libreria con el genetico ####
source("BNSL.R")
library(igraph)
library(bnlearn)
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda",
"GOLD STANDAR/insurance.rda",
"GOLD STANDAR/cancer.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
##### Resultados de oro ####
### Cargar toda mi libreria con el genetico ####
source("BNSL.R")
library(igraph)
library(bnlearn)
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda",
"GOLD STANDAR/insurance.rda",
"GOLD STANDAR/cancer.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
##### Resultados de oro ####
### Cargar toda mi libreria con el genetico ####
source("BNSL.R")
library(igraph)
library(bnlearn)
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda",
"GOLD STANDAR/insurance.rda",
"GOLD STANDAR/cancer.rda")
### Definir los parametros ####
##### Exploración de las redes de oro ####
# Defino mis parametros
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
#### Va a ocurrir otra vez el asunto ####
i = 1
# Resultados oro ##3
reso = data.frame(KL = 0,SDH = 0 )
for(i in 1:length(rutas)){
#### Cargar la red de oro ####
print(rutas[i])
load(rutas[i])
#### Gráficar la red y obtener sus datos ####
set.seed(12) # Obtener mil instancias
data = rbn(bn, 1000)
#### Calcular la red con mi algoritmo ###
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
### Gráfico de Convergencia ###
png(paste0(i,"gc.png") , width = 800, height = 600, res = 100)
plot(sapply(resultado$historial, function(x) x$fitness),
type = "l", ylab = "Fitness (MDL)", xlab = "Generación")
dev.off()
#### Gráfico de la red obtenida ####
png(paste0(i,"gr.png") , width = 800, height = 600, res = 100)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
dev.off()
#### Convertir la matriz a un objeto bn
mejor_adj = resultado$mejor$adj
bn_estructura <- empty.graph(nodes = colnames(mejor_adj))
amat(bn_estructura) <- mejor_adj
#### Aprender la red usando la matriz de adyacencias y bnlearn #
bn_entrenada = bn.fit(bn_estructura, data, method = "mle")
#### Diferencia con grados de libertad de la red de oro.
loro = logLik(bn, data  )
lentrenada = logLik(bn_entrenada, data  )
### Hacer el calculo con ayuda de BN learn ###
reporte = KL(bn_entrenada, bn)
### Distancia de Hamming ###
bn_estructura # La aprendida
bn_oro = bn.net(bn) # La de oro
dife = shd(bn_oro, bn_estructura)
### Guardar los resultados ###
reso[i,] = c(reporte,dife)
print(reporte)
}
warnings()
res0
### Exportar los resultados
res0 = cbind.data.frame(reso,rutas)
res0
### Exportar los resultados
write.csv(res0,"Resultadosoro.csv",row.names = F)
### Exportar los resultados
write.csv(res0,"Resultadosoro.csv",row.names = F)
### Exportar los resultados
res0 = cbind.data.frame(reso,rutas)
res0
### Exportar los resultados
write.csv(res0,"Resultadosoro.csv",row.names = F)
rm(list=ls())
### Cargar toda mi libreria con el genetico ####
source("BNSL.R")
library(igraph)
library(bnlearn)
#### Cargar la carpeta de bases ####
rutas =  list.files(path = "bases/", full.names = TRUE, recursive = TRUE)[c(2:10,1)]
i = 1
# Guardar los resultados #
resultados = data.frame(Base = 0,MDL = 0, Precision = 0,Tiempo = 0)
set.seed(27)
## Cargar la primera base ##
datos = cate(read.csv(rutas[i]))
# Decirle que la ultima variable se llama class
names(datos)[ncol(datos)] = "Class"
## Separar en prueba y entrenamiento ##
np = nrow(datos)
tn = round(nrow(datos)*0.8)
tt = np-tn
## Datasets ##
indices = sort(sample(1:np,tn))
train = datos[indices,]
test = datos[-indices,]
## Llamar al algoritmo para que haga la red ##
# Defino mis parametros
data = train # Datos de entrada categoricos
ngen = 50 # Numero de generaciones
pobsize = 30 # Tamaño de la población
pe = 0.2 # porcentaje de elitismo
pm = 0.2 # porcentaje de muta
rho = 0.7 # Probabilidad de escoger un cromosoma elite o no
umbral = 0.5 # Decision para desfuzificar
verbose = T # Ir mostrando en pantalla el registro
# Entrenar la red con el dataset de train
# Medir el tiempo #
t <- proc.time() # Inicia el cronómetro
# Proceso del genetico #
resultado = algoritmo_genetico(data, ngen , pobsize ,
pe , pm ,
rho , umbral, verbose = TRUE)
# Terminar de medir el proceso
tiempo = proc.time()-t    # Detiene el cronómetro
# 1. Define the filename and dimensions
png(paste0(i,"RED.png") , width = 800, height = 600, res = 100) # You can adjust width, height, and resolution (res)
# 2. Recreate your graph object (assuming 'resultado' is available)
g = graph_from_adjacency_matrix(resultado$mejor$adj, mode = "directed")
# 3. Plot your graph to the opened device
plot(g, vertex.size = 30, edge.arrow.size = 0.5)
# 4. Close the graphics device
dev.off()
#### Cargar la carpeta de bases ####
rutas = c("GOLD STANDAR/survey.rda",
"GOLD STANDAR/asia.rda",
"GOLD STANDAR/child.rda",
"GOLD STANDAR/earthquake.rda",
"GOLD STANDAR/sachs.rda",
"GOLD STANDAR/insurance.rda",
"GOLD STANDAR/cancer.rda")
