breaks = esquemas[i,],
include.lowest = TRUE,
right = TRUE)
}
#Teniendo todo, se reporta en un solo objeto todo lo depurado
resultadoF = list(Discretizados = datosR,
CAIM = Caim,
Esquemas = esquemas)
resultadoF
#### FUNCIÓN CAIM COMPLETA PARA DISCRETIZAR ####
CAIM = function(datos,VarClas){
# Primero aplica el detector para identificar a la variable clase
# de los atributos y quitar las variables NO numéricas
detecta = detector(datos,VarClas)
# Separa la clase
ClaseS = detecta[length(detecta)]
# Separa los atributos considerados numéricos
atributos = setdiff(detecta,ClaseS)
# Ya tengo separativos los atributos y la variable clase
#### Inicializar el algoritmo para que itere sobre cada variable ####
# Genero los objetos con los resultados que van a ser guardados para la salida
resultados = list()
# Aplicar esto para el atributo i-esimo
for(i in atributos){ # Moverse sobre todos los indices de atributos validos
#### PASO 1 ####
# Paso 1.1 Encuentra el valor máximo (dn) y el valor mínimo(d0) del atributo
d0 = min(datos[,i],na.rm = T )
dn = max(datos[,i],na.rm = T)
# Paso 1.2 Forma un conjunto de todos los valores distintos de F_i en orden
# ascendente, inicializa todos los posibles limites de los intervalos B con
# minimo, maximo y todos los puntos medios de todas las parejas adyacentes
unicos = sort(unique(datos[,i]))
B = c()
# Sacar las parejas
for(pi in 2:length(unicos)){
# Sacar las mitades
B[pi-1] = (unicos[pi]+unicos[pi-1])/2
}
### Paso 1.3 Define el esquema de discretización inicial como D: {[d0,dn]}
# y define el GlobalCaim = 0#
D = c(d0,dn) # Esquema de discretización base
GlobalCaim = 0 #Global Caim Base
#### PASO 2 ####
# Paso 2.1 Inicializa k = 1
k = 1
# Inicializo otras variables para hacer funcionar el while
maxCaim = 0
while((maxCaim > GlobalCaim) | (k<length(unique(datos[,ClaseS])))){
# 2.2 Tentativamente agrega un intervalo interno de B,
# el cual no se encuentre en D y calculale el correspondiente CAIM
# Indices de CAIM para elegir un esquema
ICAIM = c()
# Ciclo para probar con todas las posibles mitades como candidatos
# a ser parte del esquema
for(posi in 1:length(B)){
# Crea el esquema i-esimo
Di = sort(c(D,B[posi]))
# Discretiza con el esquema i-esimo
Inter = cut(datos[,i],
breaks = Di,
include.lowest = TRUE,
right = TRUE)
# Calcula el CAIM
ICAIM[posi] = CAIMp(Inter,datos[,ClaseS])
}
# 2.3 Una vez probadas todas las adiciones provisionales,
# aceptar la que tenga el valor más alto de de CAIM
# Extraigo el indice máximo y de caim y su posición
maxCaim = max(ICAIM) # Maximo Caim en la iteración i-esima
maxCaimPos = which.max(ICAIM) # Posición del maximo Caim
#2.4 Si (CAIM > GlobalCAIM O k<S) Actualiza D con la propuesta
#de intervalo aceptada en el paso 2.3 y configura GlobalCAIM = CAIM,
#si no termina
# Actualizar el esquema
D = sort(c(D,B[maxCaimPos])) # Actualización del esquema
#Quito el valor seleccionado de la bolsa de mitades B
B = B[-maxCaimPos]
# Actualiza el valor del global
GlobalCaim = maxCaim
k = k+1
}
# Reporta y guarda el resultado de la iteración
# Crear el resultado como un vector
vr = c(D,GlobalCaim,k,i)
resultados = append(resultados,list(vr))
}
# Ya estando fuera de la función, puedo operar los resultados
# para reportar las salidas necesarias
### Colapsar en una matriz la lista de resultados
resultados = do.call(rbind, resultados)
# Separar los esquemas
esquemas = resultados[,1:(ncol(resultados)-3)]
# Caim por variable
Caim =cbind.data.frame(Variables = names(datos[,atributos]),
Caim = resultados[,(ncol(resultados)-2)])
# Usar los intervalos para discretizar por variable
datosR = datos
# Discretizar solo las variables que se les obtuvo el esquema
for(i in 1:length(atributos)){
# Aplicar la discretización para el atributo i-esimo dentro
# los permitidos
datosR[,atributos[i]] = cut(datosR[,atributos[i]],
breaks = esquemas[i,],
include.lowest = TRUE,
right = TRUE)
}
#Teniendo todo, se reporta en un solo objeto todo lo depurado
resultadoF = list(Discretizados = datosR,
CAIM = Caim,
Esquemas = esquemas)
return(resultadoF)
}
CAIM()
CAIM(datos1,"Species")
#### Base de datos 1 IRIS ####
datos1 = iris
R1 = CAIM(datos1,"Species")
R1
cbind.data.frame(R1$Discretizados$Sepal.Length,datos$Sepal.Length)
a = cbind.data.frame(R1$Discretizados$Sepal.Length,datos$Sepal.Length)
a[order(a$`R1$Discretizados$Sepal.Length`),]
rm(list=ls())
#### Cargar el algoritmo para discretizar ####
source("CAIMA.R")
# Iris ya viene aqui por defecto, entonces poco más #
datos1 = iris
R1 = CAIM(datos1,"Species")
R1$Discretizados
write.csv(R1$Discretizados,"1IrisD.csv",row.names = F)
#### 2.-Palmer penguins ####
# Se carga la base de los pinguinos palmer #
library(palmerpenguins)
datos2 = palmerpenguins::penguins
datos2 = as.data.frame(palmerpenguins::penguins)
# Identificar datos faltantes
datos2[is.na(datos2$bill_length_mm)==F,]
# Identificar datos faltantes
dim(datos2[is.na(datos2$bill_length_mm)==F,])
dim(datos2)
# Identificar datos faltantes
datos2[is.na(datos2$bill_length_mm)==F,]
# Identificar datos faltantes
datos21 = datos2[is.na(datos2$bill_length_mm)==F,]
View(datos21)
sum(is.na(datos21))
head(datos21)
is.na(datos2$sex)
sum(is.na(datos2$sex))
# Identificar datos faltantes
datos21 = datos2[is.na(datos2$sex)==F,]
sum(is.na(datos2$sex))
sum(is.na(datos21$sex))
sum(is.na(datos21))
dim(datos21)
datos2
dim(datos2)
dim(datos21)
names(datos21)
# Identificar datos faltantes
datos2sf = datos2[is.na(datos2$sex)==F,]
# Aplicar el caim sobre la parte discreta #
datos2c = datos2sf[,c(3:6)]
names(datos2c)
# Aplicar el caim sobre la parte discreta #
datos2c = datos2sf[,c(3:6,1)]
datos2c
# Aplicar el caim sobre la parte discreta #
datos2c = CAIM(datos2sf[,c(3:6,1)],"species")
datos2c$Discretizados
# Aplicar el caim sobre la parte discreta #
datos2c = CAIM(datos2sf[,c(3:6,1)],"species")$Discretizados
head(datos2c)
datos2c[,-5]
# Corregir sobre la final y enviar #
datos2sf[,c(3:6)] = datos2c[,-5]
R2 = datos2sf
R2
table(datos2$year)
write.csv(R2,"2PalmerPenD.csv",row.names = F)
#### 2.-Palmer penguins ####
# Se carga la base de los pinguinos palmer #
library(palmerpenguins)
datos2 = as.data.frame(palmerpenguins::penguins)
dim(datos2)
names(datos2sf)
# Identificar datos faltantes
datos2sf = datos2[is.na(datos2$bill_depth_mm)==F,c(3:6,1)]
datos2sf
# Aplicar el caim sobre la parte discreta #
R2 = CAIM(datos2sf[,-5],"species")
# Aplicar el caim sobre la parte discreta #
R2 = CAIM(datos2sf,"species")
sum(is.na(datos2sf))
# Aplicar el caim sobre la parte discreta #
R2 = CAIM(datos2sf,"species")
R2
R2$Discretizados$bill_length_mm
R2$Discretizados$body_mass_g
R2$Discretizados$flipper_length_mm
# Corregir sobre la final y enviar #
write.csv(R2,"2PalmerPenD.csv",row.names = F)
# Aplicar el caim sobre la parte discreta #
R2 = CAIM(datos2sf,"species")
# Corregir sobre la final y enviar #
write.csv(R2$Discretizados,"2PalmerPenD.csv",row.names = F)
table(R2$Discretizados$flipper_length_mm,R2$Discretizados$species)
diag(table(R2$Discretizados$flipper_length_mm,R2$Discretizados$species))
sum(diag(table(R2$Discretizados$flipper_length_mm,R2$Discretizados$species)))
sum(diag(table(R2$Discretizados$flipper_length_mm,R2$Discretizados$species)))/nrow(R2$Discretizados)
dim(R2$Discretizados)
reticulate::repl_python()
reticulate::repl_python()
file.choose()
ruta = "C:\\Users\\Angel\\Downloads\\wine\\wine.data"
a = read.csv(ruta)
dim(a)
reticulate::repl_python()
R3 = "vinos.csv"
datos3 = read.csv("vinos.csv")
View(datos3)
table(datos3$class)
sum(is.na(datos3))
dim(datos)
dim(datos3)
# Aplicar el caim sobre la parte discreta #
R3 = CAIM(datos3sf,"class")
#### Cargar el algoritmo para discretizar ####
source("CAIMA.R")
rm(list=ls())
#### Cargar el algoritmo para discretizar ####
source("CAIMA.R")
datos3 = read.csv("vinos.csv")
table(datos3$class)
dim(datos3)
# Aplicar el caim sobre la parte discreta #
R3 = CAIM(datos3sf,"class")
# Aplicar el caim sobre la parte discreta #
R3 = CAIM(datos3,"class")
# Corregir sobre la final y enviar #
write.csv(R3$Discretizados,"3WinesD.csv",row.names = F)
library(pdp)
install.packages("pdp")
library(pdp)
datos3 = pima
sum(is.na(datos4))
datos4= pima
sum(is.na(datos4))
View(datos4)
dim(datos4)
#### 4.- Ataques al corazón ###
library(kmed)
install.packages("kmed")
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
sum(is.na(datos4))
dim(datos4)
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
sum(is.na(datos4))
dim(datos4)
datos4$class
table(datos4$class)
?heart
datos4$class
datos4$class
table(datos4$class)
datos4$class[datos4$class>0]
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
datos4$class[datos4$class>0] = 1
dim(datos4)
R4 = CAIM(datos4,"class")
# Corregir sobre la final y enviar #
write.csv(R4$Discretizados,"4HeartAttacksD.csv",row.names = F)
View(R4)
View(R4$Discretizados)
View(R4$Discretizados)
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
datos4$class[datos4$class>0] = 1
head(datos4)
ifelse(datos4$class==0,"Sano","Enfermo")
datos4$class =  ifelse(datos4$class==0,"Sano","Enfermo")
head(datos4)
# Cambiar el sexo por etiquetas #
datos4$sex[datos4$sex==T]
# Cambiar el sexo por etiquetas #
datos4$sex[datos4$sex==F]
# Cambiar el sexo por etiquetas #
datos4$sex =  ifelse(datos4$sex==T,"Hombre","Mujer")
head(datos4)
c(1 = "Hola")
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
cp[datos4$cp]
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
datos4$cp = cp[datos4$cp]
head(datos4)
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"120más","120menos")
head(datos4)
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"mas120","menos120")
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
# Cambiar la etiqueta a 2 posibles resultados
datos4$class[datos4$class>0] = 1
datos4$class =  ifelse(datos4$class==0,"Sano","Enfermo")
# Cambiar el sexo por etiquetas #
datos4$sex =  ifelse(datos4$sex==T,"Hombre","Mujer")
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
datos4$cp = cp[datos4$cp]
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"mas120","menos120")
head(datos4)
# Cambiar lo exang
datos4$exang =  ifelse(datos4$exang==T,"Inducido","Noinducido")
datos4$class =  ifelse(datos4$class==0,"Sano","Enfermo")
# Cambiar el sexo por etiquetas #
datos4$sex =  ifelse(datos4$sex==T,"Hombre","Mujer")
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
datos4$cp = cp[datos4$cp]
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"mas120","menos120")
# Cambiar lo exang
datos4$exang =  ifelse(datos4$exang==T,"Inducido","Noinducido")
head(datos4)
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
# Cambiar la etiqueta a 2 posibles resultados
datos4$class[datos4$class>0] = 1
datos4$class =  ifelse(datos4$class==0,"Sano","Enfermo")
# Cambiar el sexo por etiquetas #
datos4$sex =  ifelse(datos4$sex==T,"Hombre","Mujer")
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
datos4$cp = cp[datos4$cp]
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"mas120","menos120")
# Cambiar lo exang
datos4$exang =  ifelse(datos4$exang==T,"Inducido","Noinducido")
head(datos4)
# Cambiar restcg
restcg = c("Normal","Anormalidad","Ventricular")
datos4$restecg+1
datos4$restecg
as.numeric(datos4$restecg)
as.numeric(datos4$restecg)
# Cambiar restcg
restcg = c("Normal","Anormalidad","Ventricular")
datos4$restecg = restecg[as.numeric(datos4$restecg)]
# Cambiar restcg
restcg = c("Normal","Anormalidad","Ventricular")
datos4$restecg = restcg[as.numeric(datos4$restecg)]
head(datos4)
head(datos4)
head(datos4)
# Cambiar slope #
slope = c("Ascendente","Plana","Descendente")
as.numeric(datos4$slope)
datos4$slope = slope[as.numeric(datos4$slope)]
head(datos4)
unique(CA)
unique(datos4$ca)
# Cambiar CA #
thal = c("Normal","DefectoFijo","DefectoReversible")
thal
datos4$thal
as.numeric(datos4$thal)
datos4$thal = thal[as.numeric(datos4$thal)]
head(datos4)
dim(datos4)
#### 4.- Ataques al corazón ###
library(kmed)
datos4 = heart
# Cambiar la etiqueta a 2 posibles resultados
datos4$class[datos4$class>0] = 1
datos4$class =  ifelse(datos4$class==0,"Sano","Enfermo")
# Cambiar el sexo por etiquetas #
datos4$sex =  ifelse(datos4$sex==T,"Hombre","Mujer")
# Cambiar el cp
cp = c("Angina","Atipico","NoAnginal","Asintomatico")
datos4$cp = cp[datos4$cp]
# Cambiar lo de las gbs
datos4$fbs =  ifelse(datos4$fbs==T,"mas120","menos120")
# Cambiar lo exang
datos4$exang =  ifelse(datos4$exang==T,"Inducido","Noinducido")
# Cambiar restcg
restcg = c("Normal","Anormalidad","Ventricular")
datos4$restecg = restcg[as.numeric(datos4$restecg)]
# Cambiar slope #
slope = c("Ascendente","Plana","Descendente")
datos4$slope = slope[as.numeric(datos4$slope)]
# Cambiar CA #
thal = c("Normal","DefectoFijo","DefectoReversible")
datos4$thal = thal[as.numeric(datos4$thal)]
R4 = CAIM(datos4,"class")
head(R4$Discretizados)
# Corregir sobre la final y enviar #
write.csv(R4$Discretizados,"4HeartAttacksD.csv",row.names = F)
reticulate::repl_python()
reticulate::repl_python()
#### 5.-Carros para la venta ###
datos5 = read.csv("cars.csv")
# Cambiar a solo 3 clases
datos5$class[datos5$class=="vgood"] = "good"
# Revisar personas #
persons = c("2P","4P","4Mas")
datos5$persons = persons[as.numeric(as.factor(datos5$persons))]
# Revisar las puertas #
doors = c("2Puertas","3Puertas","4Puertas","5Mas")
datos5$doors = doors[as.numeric(as.factor(datos5$doors))]
# Corregir sobre la final y enviar #
write.csv(datos5,"5CarEvaluationD.csv",row.names = F)
#### 5.-Carros para la venta ###
datos5 = read.csv("cars.csv")
# Cambiar a solo 3 clases
datos5$class[datos5$class=="vgood"] = "good"
# Revisar personas #
persons = c("2P","4P","4Mas")
datos5$persons = persons[as.numeric(as.factor(datos5$persons))]
# Revisar las puertas #
doors = c("2Puertas","3Puertas","4Puertas","5Mas")
datos5$doors = doors[as.numeric(as.factor(datos5$doors))]
# Corregir sobre la final y enviar #
write.csv(datos5,"5CarEvaluationD.csv",row.names = F)
getwd()
dim(datos5)
reticulate::repl_python()
#### 6.-Riesgo materno ###
datos6 = read.csv("materna.csv")
head(datos6)
table(datos6$RiskLevel)
str(datos6)
sum(is.na(datos6))
# Corregir sobre la final y enviar #
write.csv(R6$Discretizados,"6MaternalHealthRisk.csv",row.names = F)
# Discretizar la cosa #
R6 = CAIM(datos6,"RiskLevel")
head(R6$Discretizados)
# Corregir sobre la final y enviar #
write.csv(R6$Discretizados,"6MaternalHealthRisk.csv",row.names = F)
dim(datos6)
reticulate::repl_python()
#### 7.-Riesgo materno ###
datos7 = read.csv("pasitas.csv")
datos7$Class
#### 7.-Riesgo materno ###
datos7 = read.csv("pasitas.csv")
datos7$Class
datos7 = read.csv("pasitas.csv")
datos7$Class
#### 7.-Riesgo materno ###
datos7 = read.csv("pasitas.csv")
datos7$Class
# Discretizar la cosa #
R7 = CAIM(datos7,"Class")
head(R7$Discretizados)
# Corregir sobre la final y enviar #
write.csv(R6$Discretizados,"7Raisins.csv",row.names = F)
#### 7.-Riesgo materno ###
datos7 = read.csv("pasitas.csv")
datos7$Class
# Discretizar la cosa #
R7 = CAIM(datos7,"Class")
head(R7$Discretizados)
# Corregir sobre la final y enviar #
write.csv(R7$Discretizados,"7Raisins.csv",row.names = F)
dim(datos7)
reticulate::repl_python()
datos8 = read.csv("nurses.csv")
datos8$Class
datos8$health
head(datos8)
table(datos8$health,datos8$class)
table(datos8$class)
str(datos8)
tables(datos8$children)
table(datos8$children)
# Revisar las puertas #
child = c("1hijo","2hijos","3hijos","4más")
as.factor(datos8$children)
as.numeric(as.factor(datos8$children))
child[as.numeric(as.factor(datos8$children))]
# Corregir sobre la final y enviar #
write.csv(datos8,"8Nurses.csv",row.names = F)
reticulate::repl_python()
#### 9.- Abalone ###
datos9 = read.csv("abalone.csv")
head(datos9)
reticulate::repl_python()
table(datos9$Rings+1.5)
reticulate::repl_python()
#### 8.- Nurserys ###
datos8 = read.csv("nurses.csv")
# Revisar las puertas #
child = c("1hijo","2hijos","3hijos","4más")
datos8$children = child[as.numeric(as.factor(datos8$children))]
# Corregir sobre la final y enviar #
write.csv(datos8,"8Nurses.csv",row.names = F)
table(datos8$class)
dim(datos8)
reticulate::repl_python()
