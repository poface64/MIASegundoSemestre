X2 = datos2[,-1]
Y2 = datos2[,1]
m2 = colMeans(X2)
z2 = (t(X2)-m2) %*% t(t(X2)-m2)
dim(X2)
dim(X1)
round(z1,4)
round(z2,4)
X = datos1[,-1]
X = datos1[,-1]
Y = datos1[,1]
X
dim(x)
dim(X)
X = datos2[,-1]
Y = datos2[,1]
X
dim(X)
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
Sw
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
St
X
dim(X)
m2
m
(t(X)-m) %*% t(t(X)-m)
X2
(t(X2)-m2) %*% t(t(X2)-m2)
X2 = datos2[,-1]
Y2 = datos2[,1]
m2 = colMeans(X2)
z2 = (t(X2)-m2) %*% t(t(X2)-m2)
z2
X1 = datos1[,-1]
Y1 = datos1[,1]
m1 = colMeans(X1)
z1 = (t(X1)-m1) %*% t(t(X1)-m1)
z1
X = datos1[,-1]
Y = datos1[,1]
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
St
z1 = (t(X1)-m1) %*% t(t(X1)-m1)
z1
# Varianza entre clases de la matriz #
Sb = St-Sw
Sb
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
round(S,4)
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
round(A$values)
round(A$values,4)
round(A$vectors,4)
plot(datos1[,3],datos1[,2],pch = 16,col = datos1$species)
plot(datos1[,3],datos1[,4],pch = 16,col = datos1$species)
plot(datos1[,3],datos1[,5],pch = 16,col = datos1$species)
plot(datos1[,3],datos1[,2],pch = 16,col = datos1$species)
plot(datos1[,4],datos1[,2],pch = 16,col = datos1$species)
plot(datos1[,5],datos1[,2],pch = 16,col = datos1$species)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
VE
rm(list=ls())
# Cargar la base de datos y la libreria #
library(MASS)
library(palmerpenguins)
datos = as.data.frame(palmerpenguins::penguins)[,-c(2,7,8)]
datos1 = datos[is.na(datos$bill_length_mm)==F, ]
datos2 = datos1[datos1$species!="Gentoo",]
datos2$species = as.factor(as.character(datos2$species))
# Aplicar el LDA que viene de formulazo #
modelo = lda(species~.,datos1)
modelo
#### Expansión limpia del programa para hacer LDA multiclases ####
# Generar la matriz #
X = datos2[,-1]
Y = datos2[,1]
# Armar la base #
CPR = c(40, 11.1, 30.0, 21.4, 10.7, 3.4, 42.0, 31.1, 50, 60.4, 45.7, 17.3)
Temp = c(36.0, 37.2, 36.5, 39.4, 39.6, 40.7, 37.6, 42.2, 38.5, 39.4, 38.6, 42.7)
Label = c('viral', 'viral', 'viral', 'viral', 'viral', 'viral', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial')
datos = data.frame(CPR,Temp,Label)
X = datos[,1:2]
Y = datos[,3]
X = datos1[,-1]
Y = datos1[,1]
X = datos2[,-1]
X = datos2[,-1]
Y = datos2[,1]
Y
X
dim(X)
X = datos2[,-1]
Y = datos2[,1]
dim(X)
LDA = function(X,Y){
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
# Vectores seleccionados
SV = t(t(A$vectors[,DS]))
# Crear el vector de proyecciones k-1 dimensional
Z = X %*% SV
colnames(Z) = paste0("ND",1:ncol(SV))
# Comprimir y reportar la salida
resu = list(varianza = VE,
coeficientes = SV,
proyecciones = Z)
}
medias
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
Sw
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
m
medias
m
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
St
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
Sb
Sw
St
# Varianza entre clases de la matriz #
Sb = St-Sw
Sb
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
S
round(S,4)
# Calcular los eigenvalores de la matriz
A = eigen(S)
A
X = datos[,1:2]
Y = datos[,3]
Y
X = datos1[,-1]
Y = datos1[,1]
Y
X
X = datos1[,-1]
Y = datos1[,1]
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
round(medias,4)
m
round(m,4)
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
m
m
X
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
m
medias
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
Sw
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
St
# Varianza entre clases de la matriz #
Sb = St-Sw
Sb
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
S
# Calcular los eigenvalores de la matriz
A = eigen(S)
A
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
Z
Sw
medias
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
# Vectores seleccionados
SV = t(t(A$vectors[,DS]))
SV
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
DS
X = datos2[,-1]
Y = datos2[,1]
Y
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
m
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
# Vectores seleccionados
SV = t(t(A$vectors[,DS]))
SV
# Crear el vector de proyecciones k-1 dimensional
Z = X %*% SV
colnames(Z) = paste0("ND",1:ncol(SV))
# Comprimir y reportar la salida
resu = list(varianza = VE,
coeficientes = SV,
proyecciones = Z)
resu
y
plot(resu$proyecciones,y=length(resu$proyecciones),
col = Y)
Y
dim(resu$proyecciones)
plot(x = resu$proyecciones,y=1:length(resu$proyecciones),
col = Y)
plot(x = resu$proyecciones,y=1:length(resu$proyecciones),
col = Y)
plot(x = resu$proyecciones,y=rep(0,length(resu$proyecciones)),
col = Y)
plot(x = resu$proyecciones,y=rep(0,length(resu$proyecciones)),
col = Y,pch = 16)
dim(resu$proyecciones)
LDA = function(X,Y){
# Entra la matriz X
X = as.matrix(X)
#### Generar la matriz de medias ####
nc = ncol(X) # Numero P de variables
clas = unique(Y) # K Clases
nr = length(clas)  # Cantidad K de clases
medias = matrix(0,nr,nc) # Matriz de medias vacia
Sw = matrix(0,nc,nc) # Matriz de varianza Sw vacia
for(i in 1:nr){
# Separar los datos por clase #
mini1 = X[Y==clas[i],] # Subconjunto para la clase k-esima
# Calcular las medias
medias[i,] = colMeans(mini1) # Vector de medias K-esimo
# Calcular las matrices de covarianzas
Sn = (t(mini1)-medias[i,]) %*% t(t(mini1)-medias[i,]) #Matriz de varianza k-esima
# Acumuar la varianza
Sw = Sw + Sn # Matriz de dispersión dentro de la clase
}
# Dispersión total de los datos #
m = colMeans(X) # Vector de medias global
St = (t(X)-m) %*% t(t(X)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
# Calcular los eigenvalores de la matriz
A = eigen(S)
# Varianza explicada con los eigenvalores
VE = round(100*A$values/sum(A$values),4)
# Eigenvectores para proyectar los datos en el nuevo espacio de k-1 dimensiones
DS = (VE>0.0001)
# Vectores seleccionados
SV = t(t(A$vectors[,DS]))
# Crear el vector de proyecciones k-1 dimensional
Z = X %*% SV
colnames(Z) = paste0("ND",1:ncol(SV))
# Comprimir y reportar la salida
resu = list(varianza = VE,
coeficientes = SV,
proyecciones = Z)
}
Y
Y1
X = datos1[,-1]
Y = datos1[,1]
Y
Y
LDA(X,Y)
A = LDA(X,Y)
A$proyecciones
plot(A$proyecciones)
plot(A$proyecciones)
plot(A$proyecciones,
pch = 16)
plot(A$proyecciones,
pch = 16,
col = Y)
head(A$proyecciones)
A$proyecciones
A$coeficientes
A$coeficientes |> round(digits = 4)
ZA = head(A$proyecciones)
library(flextable)
flextable(Z1)
flextable(ZA)
flextable(as.data.frame(ZA))
