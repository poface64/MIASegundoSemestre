rm(list=ls())
# Cargar la base de iris
datos = iris
# Cargar la base de iris
datos = iris
# Separar en 2 la base de datos
D1 = datos[datos$Species=="versicolor",]
D1
D2 = datos[datos$Species=="virginica",]
D2
# Separar en 2 la base de datos
D1 = datos[datos$Species=="versicolor",-5] |> as.matrix()
D2 = datos[datos$Species=="virginica",-5] |> as.matrix()
D1
D2
dim(D1)
dim(D2)
# Cargar la base de iris
library(ggplot2)
datos = iris
rm(list=ls())
#### Cargar la base de iris ####
library(ggplot2)
datos = iris
datos2 = datos[datos$Species!="setosa",]
datos2$Species = as.character(datos2$Species) |> as.factor()
datos2$Species
#### Gráficar el caso ####
ggplot(datos2,aes(x = Sepal.Length,
y = Sepal.Width,
fill = Species)) +
geom_point()+
theme_bw()
#### Gráficar el caso ####
ggplot(datos2,aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point()+
theme_bw()
#### Gráficar el caso ####
ggplot(datos2,aes(x = Sepal.Length,
y = Sepal.Width,
color = Species)) +
geom_point()+
theme_bw() +
theme(legend.position = "bottom")
library(rgl)
install.packages("rgl")
library(rgl)
rgl(x = datos$Sepal.Length,
y = datos$Sepal.Width,
z = datos$Petal.Length)
plot3d(x = datos$Sepal.Length,
y = datos$Sepal.Width,
z = datos$Petal.Length)
# Separar en 2 la base de datos
D1 = datos[datos$Species=="versicolor",-5] |> as.matrix()
D2 = datos[datos$Species=="virginica",-5] |> as.matrix()
# Extraer los vectors de medias
m1 = colMeans(D1)
m2 = colMeans(D2)
m1
m2
t(m1-m2)
t(t(m1-m2))
t(m1-m2)
t(t(m1-m2))
# Matriz de varianzas y covarianzas dentro de clases
SB =  t(m1-m2) %*% t(t(m1-m2))
SB
t(m1-m2)
t(t(m1-m2))
t(t(m1-m2))
# Matriz de varianzas y covarianzas dentro de clases
SB = t(t(m1-m2)) %*% t(m1-m2)
SB
D1[1:3,]
m1
D1[1:3,]-m1
t(D1[1:3,])-m1
m1
t(D1[1:3,])
(t(D1)-m1) %*% t(t(D1)-m1)
cov(D1)
cov(D1)*49
# Entre clases #
(t(D1)-m1) %*% t(t(D1)-m1)
S2 = (t(D2)-m2) %*% t(t(D2)-m2)
cov(D2)*49
S2 = (t(D2)-m2) %*% t(t(D2)-m2)
S2
Sw = S1+S2
# Entre clases #
S1 = (t(D1)-m1) %*% t(t(D1)-m1)
S2 = (t(D2)-m2) %*% t(t(D2)-m2)
Sw = S1+S2
Sw
S
solve(Sw)
SB
SB
# Matriz de varianzas y covarianzas dentro de clases
SB = t(t(m1-m2)) %*% t(m1-m2)
SB
# Entre clases #
S1 = (t(D1)-m1) %*% t(t(D1)-m1)
S2 = (t(D2)-m2) %*% t(t(D2)-m2)
Sw = S1+S2
S = solve(Sw)%*%SB
S
# Obtener los eigenvalores #
A = eigen(S)
A
A$values
100*A$values/sum(A$values)
round(100*A$values/sum(A$values),4)
# Obtener los eigenvalores #
A = eigen(S)
# Obtener los eigenvalores #
A = eigen(S)
round(100*A$values/sum(A$values)
)
round(100*A$values/sum(A$values))
# Obtener los eigenvalores #
A = eigen(S)
round(100*A$values/sum(A$values))
# Mostrar el resultado de los LDA
A$vectors
datos2[,-5]
as.matrix(datos2[,-5])
as.matrix(datos2[,-5]) %*% A$vectors
# Mostrar el resultado de los LDA
dataP = as.matrix(datos2[,-5]) %*% A$vectors
plot(dataP)
plot(dataP,pch = 16,
type = "o")
plot(dataP,pch = 16,
type = )
plot(dataP,pch = 16,
col = datos2$Species)
plot(dataP[,1],pch = 16,
col = datos2$Species)
CPR = c(40, 11.1, 30.0, 21.4, 10.7, 3.4, 42.0, 31.1, 50, 60.4, 45.7, 17.3)
Temp = c(36.0, 37.2, 36.5, 39.4, 39.6, 40.7, 37.6, 42.2, 38.5, 39.4, 38.6, 42.7)
Label = c('viral', 'viral', 'viral', 'viral', 'viral', 'viral', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial')
rm(list=ls())
# Pruebas
CPR = c(40, 11.1, 30.0, 21.4, 10.7, 3.4, 42.0, 31.1, 50, 60.4, 45.7, 17.3)
Temp = c(36.0, 37.2, 36.5, 39.4, 39.6, 40.7, 37.6, 42.2, 38.5, 39.4, 38.6, 42.7)
Label = c('viral', 'viral', 'viral', 'viral', 'viral', 'viral', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial')
# Pruebas
CPR = c(40, 11.1, 30.0, 21.4, 10.7, 3.4, 42.0, 31.1, 50, 60.4, 45.7, 17.3)
Temp = c(36.0, 37.2, 36.5, 39.4, 39.6, 40.7, 37.6, 42.2, 38.5, 39.4, 38.6, 42.7)
Label = c('viral', 'viral', 'viral', 'viral', 'viral', 'viral', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial', 'Bacterial')
datos = data.frame(CPR,Temp,Label)
datos
D
datos[,-3]
# Separar los datos
Dk = as.matrix(datos[,-3])
Dk
D1 = as.matrix(datos[datos$Label=="viral",])
D1
D1 = as.matrix(datos[datos$Label=="viral",-5])
D1
D1 = as.matrix(datos[datos$Label=="viral",-3])
D1
# Separar los datos
Dk = as.matrix(datos[,-3])
D1 = as.matrix(datos[datos$Label=="viral",-3])
D2 = as.matrix(datos[datos$Label!="viral",-3])
D2
D1
m1 = colMeans(D1)
m2 = colMeans(D2)
m1
m2
D2
m1 = colMeans(D1);m1
m2 = colMeans(D2);m2
D1
m1
D1-m1
t(t(D1)-m1)
D1
m1
t(t(D1)-m1)
# Matriz de dispersión dentro de la clase
S1 = t(t(D1)-m1) %*% (t(D1)-m1)
S1
t(t(D1)-m1)
t(t(D1)-m1)
(t(D1)-m1)
# Matriz de dispersión dentro de la clase
S1 = t(D1)-m1) %*% t(t(D1)-m1)
# Matriz de dispersión dentro de la clase
S1 = t(D1)-m1) %*% t(t(D1)-m1)
# Matriz de dispersión dentro de la clase
S1 = (t(D1)-m1) %*% t(t(D1)-m1)
S1
cov(D1)
cov(D1)*5
# Matriz de dispersión dentro de la clase
S1 = (t(D1)-m1) %*% t(t(D1)-m1)
S2 = (t(D2)-m2) %*% t(t(D2)-m2)
S1 = (t(D1)-m1) %*% t(t(D1)-m1);S1
S2 = (t(D2)-m2) %*% t(t(D2)-m2);S2
# Matriz de dispersión dentro de la clase
S1 = (t(D1)-m1) %*% t(t(D1)-m1);S1
S2 = (t(D2)-m2) %*% t(t(D2)-m2);S2
Sw = S1 + S2
Sw
Sw = S1 + S2;Sw
# Obtener las medias
m = colMeans(Dk);m
m1 = colMeans(D1);m1
m2 = colMeans(D2);m2
# Matriz de dispersión dentro de la clase
S1 = (t(D1)-m1) %*% t(t(D1)-m1);S1
S2 = (t(D2)-m2) %*% t(t(D2)-m2);S2
Sw = S1 + S2;Sw
m1-m
t(m1-m)
# Media general
(m1-m)%*%t(t(m1-m))
# Media general
t(t(m1-m))%*%(m1-m)
t(t(m2-m))%*%(m2-m)
# Media general
t(t(m1-m))%*%(m1-m)
t(t(m2-m))%*%(m2-m)
# Obtener las medias
m = colMeans(Dk);m
m1 = colMeans(D1);m1
m2 = colMeans(D2);m2
# Matriz de dispersión dentro de la clase
S1 = (t(D1)-m1) %*% t(t(D1)-m1);S1
S2 = (t(D2)-m2) %*% t(t(D2)-m2);S2
Sw = S1 + S2;Sw
# Media general
t(t(m1-m))%*%(m1-m)
t(t(m2-m))%*%(m2-m)
m2
m2-m
m
m2-m
m2-m
m1-m
# Media general
t(t(m1-m))%*%(m1-m)
t(t(m2-m))%*%(m2-m)
# Media general
t(t(m1-m))%*%(m1-m)
# Media general
t(t(m1-m))%*%(m1-m)+t(t(m2-m))%*%(m2-m)
Dk
m
t(Dk)-m
# Varianza total sin información de clase
St = (t(Dk)-m) %*% t(t(Dk)-m)
St
cov(Dk)
cov(Dk)*11
# Varianza total sin información de clase
St = (t(Dk)-m) %*% t(t(Dk)-m)
# Varianza entre clases de la matriz #
Sb = St-Sw
Sb
solve(Sw)
solve(Sw) %*% Sb
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
A = eigen(S)
A
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb
S
# Armando la matriz de varianzas invertidas
S =  solve(Sw) %*% Sb;S
A = eigen(S)
# Varianza explicada
100*A$values/sum(A$values)
# Varianza explicada
round(100*A$values/sum(A$values),4)
# Vectores
A$vectors
A$values
A$values
A$vectors
A$vectors[,1]
Dk
source("~/.active-rstudio-document", echo=TRUE)
A$vectors[,1]
# Crear el vector de proyecciones
Dk %*% t(A$vectors[,1])
t(A$vectors[,1])
t(t(A$vectors[,1]))
# Crear el vector de proyecciones
Dk %*% t(t(A$vectors[,1]))
Dk[1,]
Dk[1,]* A$vectors[,1]
(Dk[1,]* A$vectors[,1]) |> sum()
Dk
# Crear el vector de proyecciones
Dk %*% t(t(A$vectors[,1]))
# Crear el vector de proyecciones
Z = Dk %*% t(t(A$vectors[,1]))
Dk[1,]
* A$vectors[,1]) |> sum()
A$vectors[,1]
40*0.15 + 36*98.9
40*0.15 + 36*0.99
Z
40*0.15 + 36*0.99
plot(Z,col = datos$Label)
plot(Z,col = factor(datos$Label))
plot(Z,col = factor(datos$Label),pch = 16)
plot(x = Z,y = 0,col = factor(datos$Label),pch = 16)
plot(x = Z,y = rep(0,length(Z)) ,col = factor(datos$Label),pch = 16)
plot(x = Z,y = rep(0,length(Z)) ,col = factor(datos$Label),pch = 16)
plot(datos,col = factor(datos$Label),pch = 16)
plot(datos[,1:2],col = factor(datos$Label),pch = 16)
