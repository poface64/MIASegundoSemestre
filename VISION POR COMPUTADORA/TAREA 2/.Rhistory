(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 3840
n2 = 2160
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 2160
n2 = 3840
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
#### Donde se va a guardar la nueva matriz ####
n1 = 2160
n2 = 3840
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
#### Dimensiones originales de la matriz
Oaltura = dim(datos1)[1]
Oancho  = dim(datos1)[2]
#### Donde se va a guardar la nueva matriz ####
n1 = 2160
n2 = 3840
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
#### Donde se va a guardar la nueva matriz ####
n1 = 3840
n2 = 2160
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Cargar las imágenes en escala de grises ####
library(png)
library(jpeg)
library(grid)
ruta = "IMG/L1.jpg"
#ruta = "IMG/Fig2.19(a).jpg"
#ruta = "IMG/IM4.jpg"
datos1 = readJPEG(ruta) # 330 Filas; 423 columnas
datos1 <- 0.299 * datos[,,1] + 0.587 * datos[,,2] + 0.114 * datos[,,3]
#ruta = "IMG/Fig2.19(a).jpg"
#ruta = "IMG/IM4.jpg"
datos = readJPEG(ruta) # 330 Filas; 423 columnas
datos1 <- 0.299 * datos[,,1] + 0.587 * datos[,,2] + 0.114 * datos[,,3]
#datos = readJPEG(ruta) # 330 Filas; 423 columnas
grid::grid.raster(datos1)
datos1[1:2,1:2] |> grid.raster()
datos1
datos1[1:2,1:2]
#### Dimensiones originales de la matriz
Oaltura = dim(datos1)[1]
Oancho  = dim(datos1)[2]
#### Donde se va a guardar la nueva matriz ####
n1 = 1000
n2 = 1000
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 4000
n2 = 4000
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 1000
n2 = 1000
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 100
n2 = 100
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(datos1)
grid.raster(nueva)
#ruta = "IMG/L1.jpg"
ruta = "IMG/Fig2.19(a).jpg"
#ruta = "IMG/IM4.jpg"
datos1 = readJPEG(ruta) # 330 Filas; 423 columnas
#datos = readJPEG(ruta) # 330 Filas; 423 columnas
grid::grid.raster(datos1)
#### Donde se va a guardar la nueva matriz ####
n1 = 1024
n2 = 1024
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 2056
n2 = 2056
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
#### Donde se va a guardar la nueva matriz ####
n1 = 256
n2 = 256
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(datos1)
grid.raster(nueva)
grid.raster(datos1)
grid.raster(nueva)
dim(datos1)
nueva = datos1
dim(nueva)
#### Donde se va a guardar la nueva matriz ####
n1 = 256
n2 = 256
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
dim(nueva)
datos1 = nueva
grid.raster(datos1)
#### Donde se va a guardar la nueva matriz ####
n1 = 1024
n2 = 1024
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Dimensiones originales de la matriz
Oaltura = dim(datos1)[1]
Oancho  = dim(datos1)[2]
#### Donde se va a guardar la nueva matriz ####
n1 = 1024
n2 = 1024
nueva = matrix(0,nrow = n1,ncol = n2)
#### Relación entre los tamaños
escalaX = (Oancho-1)/(n1-1)
escalaY = (Oaltura-1)/(n1-1)
#### Hacer el ciclo que vaya escaneando la matriz ####
for(i in 1:n1){
for(j in 1:n2){
# Coordenadas de la imagen original
X = escalaX*(j-1) + 1 # 1 adelante del borde
Y = escalaY*(i-1) + 1 # 1 adelante del borde
#### Datos para el interpolado ####
x1 = floor(X)
x2 = min(x1+1,Oancho)
y1 = floor(Y)
y2 = min(y1+1,Oaltura)
# Pesos para la interpolación
dx = X-x1
dy = Y-y1
#### Extraer los valores de los 4 pixeles vecinos
Q11 = datos1[y1,x1]
Q12 = datos1[y2,x1]
Q21 = datos1[y1,x2]
Q22 = datos1[y2,x2]
#### Nueva imagen, pixel a pixel con la interpolación
nueva[i,j] =  (1-dx) * (1-dy)*Q11 +
dx*(1-dy)*Q21 +
(1-dx)*dy*Q12 +
dx*dy*Q22
}
}
grid.raster(nueva)
grid.raster(datos1)
grid.raster(datos1)
grid.raster(nueva)
grid.raster(datos1)
grid.raster(nueva)
dim(nueva)
knitr::opts_chunk$set(echo = TRUE)
file.choose()
knitr::opts_chunk$set(echo = TRUE)
install.packages("JuliaCall")
knitr::opts_chunk$set(echo = TRUE)
